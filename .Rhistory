library(readr)
library(magrittr)
library(tidyverse)
library(rvest)
library(janitor)
library(ggplot2)
library(fontawesome)
shiny::runApp('git/car_market_analysis/app/car_market_analysis')
load("~/git/car_market_analysis/app/car_market_analysis/.RData")
runApp('git/car_market_analysis/app/car_market_analysis')
runApp('git/car_market_analysis/app/car_market_analysis')
runApp('git/car_market_analysis/app/car_market_analysis')
map <- c(-1,1,-2,2)
names(map) <- c("A","T","G","C")
strsplit("sdasda","")
unlist(strsplit("sdasda",""))
z <- unlist(strsplit("ATGC",""))
map[names(map) %in% z]
z <- unlist(strsplit("GTAC",""))
map[names(map) %in% z]
which(map %in% z)
which(map ==z[1])
vapply(z, function(x) { map[names(map) == x] })
vapply(z, function(x) { map[names(map) == x] }, 1)
vapply(z, function(x) { map[names(map) == x] }, 2)
vapply(z, function(x) { map[names(map) == x] }, 5)
vapply(z, function(x) { map[names(map) == x] }, 0)
vapply(z, function(x) {map[names(map) == x] }, 0)
vapply(z, function(x) { w <- map[names(map) == x]
map[map == w]
}, 0)
vapply(z, function(x) { w <- map[names(map) == x]}, 0)
convert <- vapply(z, function(x) { w <- map[names(map) == x]}, 0)
vapply(convert, function(x) { map[map == x] }, 0)
vapply(convert, function(x) { names(map)[map == x] }, 0)
names(map)
names(map)[vapply(z, function(x) { w <- map[names(map) == x]}, 0)]
names(map)[vapply(z, function(x) { w <- map[names(map) == x]}, 0) ]
names(map)[map == vapply(z, function(x) { w <- map[names(map) == x]}, 0) ]
names(map)[map %in% vapply(z, function(x) { w <- map[names(map) == x]}, 0) ]
z[1]
z[4]
gsub
sort(c("s","z","a"))
unique(  unlist(strsplit("xyaabbbccccdefww", "")))
paste0(sort(unique(unlist(strsplit(paste0("aretheyhere", "yestheyarehere"), "")))))
paste0(sort(unique(unlist(strsplit(paste0("aretheyhere", "yestheyarehere"), "")))))
paste(z)
paste0(sort(unique(unlist(strsplit(paste0("aretheyhere", "yestheyarehere"), "")))), sep = "")
paste0(sort(unique(unlist(strsplit(paste0("aretheyhere", "yestheyarehere"), "")))), sep = " ")
paste0(sort(unique(unlist(strsplit(paste0("aretheyhere", "yestheyarehere"), "")))), collapse = "")
c("a":"z")
paste0(letters)
utf8ToInt("d")
utf8ToInt("a")
utf8ToInt("c")
utf8ToInt("b")
utf8ToInt("z")
1900 %% 100
1900 %% 101
1901 %% 100
2452 %% 100
round(8468/100)
8468 - 8468 %% 100
(8468 - 8468 %% 100 ) / 100
ceiling(8468)
floor(8468)
floor(8468.2)
8468/100
floor(8468/100)
x <- list()
x[[1]] <- append(x[[1]],2)
x[[1]] <- append(2)
c(50, 55, 56, 57, 58)[-2]
x <- c(50, 55, 56, 57, 58)
x <- list()
x[[1]] <- c(50, 55, 56, 57, 58)
x[[2]] <- c(50, 55, 56, 57, 58)
x[[1]] <- sum(x[[1]])
x[[2]] <- sum(x[[2]])
x
max(x)
unlist(x)
max(unlist(x))
length(map[map > 100/1])
x <- 1
x[-1]
length(x[-1])
x <- list()
x[[1]] <- sum(x[[1]])
x[[1]] <- c(50, 55, 56, 57, 58)
x[[2]] <- c(50, 55, 56, 57, 58)
length(x)
c(91,74,73,85,73,81,87)
c(91,74,73,85,73,81,87) + 178
expand.grid(x = c(1,2,3))
expand.grid(x = c(1,2,3), y = c(1,2,3))
expand.grid(x = c(1,2,3), y = c(2,3))
as.list(expand.grid(x = c(1,2,3), y = c(2,3)))
expand.grid(c(50, 55, 56, 57, 58),c(50, 55, 56, 57, 58),c(50, 55, 56, 57, 58))
expand.grid(c(50, 55, 56, 57, 58),c(50, 55, 56, 57, 58),KEEP.OUT.ATTRS = FALSE)
expand.grid(c(50, 55, 56, 57, 58)
)
expand.grid(expand.grid(c(50, 55, 56, 57, 58)))
expand.grid(expand.grid(c(50, 55, 56, 57, 58))$Var1)
expand.grid(c(50, 55, 56, 57, 58))
x <-list()
x <- c(50, 55, 56, 57, 58)
listik <- list()
for (i in length(x) ) {
listik[[i]] <- x
}
listik
View(listik)
for (i in 1:length(x) ) {
listik[[i]] <- x
}
listik
expand.grid(listik)
for (i in 1:3 ) {
listik[[i]] <- x
}
expand.grid(listik)
listik <- list()
for (i in 1:3 ) {
listik[[i]] <- x
}
expand.grid(listik)
expand.grid(listik, stringsAsFactors = FALSE, KEEP.OUT.ATTRS = FALSE)
w <- expand.grid(listik, stringsAsFactors = FALSE, KEEP.OUT.ATTRS = FALSE)
View(w)
w[,sum()]
w[sum()]
w[sum().]
w{[sum(.)]}
View(w)
x[i]
x[x!=x[i]]
x <- c(50, 55, 56, 57, 58)
listik <- list()
for (i in 1:length(x) ) {
listik[[i]] <- x[x!=x[i]]
}
listik
x <- c(50, 55, 56, 57, 58)
listik <- list()
w <- expand.grid(listik, stringsAsFactors = FALSE, KEEP.OUT.ATTRS = FALSE)
expand.grid(listik, stringsAsFactors = FALSE, KEEP.OUT.ATTRS = FALSE)
listik
listik <- list()
for (i in 1:length(x) ) {
listik[[i]] <- x[x!=x[i]]
}
listik
w <- expand.grid(listik, stringsAsFactors = FALSE, KEEP.OUT.ATTRS = FALSE)
View(w)
rep(10, 10
)
combn(x,3)
x <- combn(x,3)
x
x[sum(1),]
x[,]
x[1,]
sum(x[1,])
comb(1,3)
combn(1,3)
sum(x[,1])
sum(x)
sum(x[,])
sum(x[,2])
sum(x[,3])
sum(x[,4])
chooseBestSum <- function(t, k, ls) {
if ( k < length(ls) ) return(NULL)
lengthOf <- combn(ls,k)
best <- 0
for (col in 1:ncol(lengthOf)) {
if (sum(lengthOf[,col]) <= t) {
best <-  sum(lengthOf[,1])
}
}
print(best)
}
chooseBestSum(163, 3, c(50, 55, 56, 57, 58))
strsplit("10.0.0.0")
strsplit("10.0.0.0", "")
strsplit("10.0.0.0", ".")
strsplit("10.0.0.0", "p.]")
strsplit("10.0.0.0", "[.]")
rvest::html_table(w)
seq(-1,-15, 1)
-17 == -16
-17 == -17
sum(1:-12)
1:-12
library(tidyverse)
mtcars %>% spread()
mtcars %>% spread()
mtcars
mtcars %>% spread(mpg)
mtcars %>% spread(key = mpg, value = NA)
x <- data.table::setDT(mtcars)
x <- mtcars
x <- data.table::setDT(x)
View(x)
View(x)
View(x)
x[,.(carb.sum = sum(carb))]
x[,.(carb.sum = sum(carb)), by = disp ]
x[-carb]
x[,-carb]
x[,carb:=0]
x[carb:= NULL]
x[,carb:= NULL]
x
ggplot(x, aes(~wt,~cyl)) %>% geom_line()
ggplot(x, aes(wt,cyl)) + geom_line()
ggplot(x, aes(~wt,~cyl)) + geom_line()
base64enc::base64encode("1234")
library(digest)
md5()
digest("1234",alog = "md5")
digest("1234",algo = "md5")
c(0000:9999)
as.factors(c(0000:9999))
as.factor(c(0000:9999))
crack <- function(hash) {
library(digest)
x <- c(0:99999)
for (i in x ) {
if (hash == digest(x, algo="md5")) return(x)
}
}
seq(from = as.integer(as.numeric("00000")), to = as.integer(as.numeric("99999")), by = 1)
sprintf("%05d", seq(from = 0, to = 99999, by = 1))
digest("1", "md5")
digest("10", "md5")
paste0("0", seq(1,30,by=1))
floor
quantile(c(1,2,3), probs = c(0.5))[[1]]
quantile(c(1,2,3,4), probs = c(0.5))[[1]]
shiny::runApp('git/shiny_generator')
runApp('git/shiny_generator')
runApp('git/shiny_generator')
runApp('git/shiny_generator')
runApp('git/shiny_generator')
